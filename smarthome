{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNmR0Qiyqc81LyIrXHsP4+V",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Madhan1611/iiotlevel2/blob/main/smarthome\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "br_4vwUhwiyk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "outputId": "97d11310-c61a-4af4-f837-3a59dadb0a9e"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-1075924160.py, line 5)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-1075924160.py\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    // ==== WiFi Settings ====\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "using System;\n",
        "using System.Collections;\n",
        "using UnityEngine;\n",
        "using UnityEngine.Networking;\n",
        "using UnityEngine.UI;\n",
        "\n",
        "/*\n",
        "  ThingSpeakToUnity.cs\n",
        "  --------------------\n",
        "  Attach this script to an empty GameObject in your scene (e.g. 'ThingSpeakClient').\n",
        "\n",
        "  Unity UI Setup (quick):\n",
        "  1. Create a Canvas (GameObject -> UI -> Canvas).\n",
        "  2. Inside the Canvas create 5 Text objects (GameObject -> UI -> Text) and name them:\n",
        "     - TempText\n",
        "     - HumidityText\n",
        "     - GasText\n",
        "     - LightText\n",
        "     - MotionText\n",
        "  3. Optionally create a \"LastUpdatedText\" Text to show when values were fetched.\n",
        "  4. Create a UI Button if you want manual refresh (optional).\n",
        "  5. Select your \"ThingSpeakClient\" GameObject, add this script, then drag each Text into the inspector fields below.\n",
        "\n",
        "  Notes about ThingSpeak:\n",
        "  - The script requests the latest feed using ThingSpeak's JSON feed endpoint:\n",
        "    https://api.thingspeak.com/channels/{channelID}/feeds.json?results=1\n",
        "  - If your ThingSpeak channel is private you'll need a read API key. Put it into \"readApiKey\".\n",
        "  - Polling interval is configurable (default 15s to match your device upload rate).\n",
        "\n",
        "  This single-file script contains everything you need to fetch, parse and display\n",
        "  field1..field5 which correspond to the Arduino fields in your sketch.\n",
        "*/\n",
        "\n",
        "[Serializable]\n",
        "public class Feed\n",
        "{\n",
        "    public string created_at;\n",
        "    public string entry_id;\n",
        "    public string field1; // temperature\n",
        "    public string field2; // humidity\n",
        "    public string field3; // gas\n",
        "    public string field4; // light\n",
        "    public string field5; // motion\n",
        "}\n",
        "\n",
        "[Serializable]\n",
        "public class ThingSpeakResponse\n",
        "{\n",
        "    public Feed[] feeds;\n",
        "}\n",
        "\n",
        "public class ThingSpeakToUnity : MonoBehaviour\n",
        "{\n",
        "    [Header(\"ThingSpeak Settings\")]\n",
        "    public int channelID = 3121138;             // default from your Arduino sketch\n",
        "    public string readApiKey = \"\";             // optional. If your channel is private place the read API key here.\n",
        "    public float pollInterval = 15f;            // seconds between requests\n",
        "\n",
        "    [Header(\"UI References\")]\n",
        "    public Text tempText;\n",
        "    public Text humidityText;\n",
        "    public Text gasText;\n",
        "    public Text lightText;\n",
        "    public Text motionText;\n",
        "    public Text lastUpdatedText; // optional\n",
        "\n",
        "    // Internal\n",
        "    private string baseUrl => $\"https://api.thingspeak.com/channels/{channelID}/feeds.json?results=1\" + (string.IsNullOrEmpty(readApiKey) ? \"\" : \"&api_key=\" + readApiKey);\n",
        "\n",
        "    private void Start()\n",
        "    {\n",
        "        if (tempText == null || humidityText == null || gasText == null || lightText == null || motionText == null)\n",
        "        {\n",
        "            Debug.LogWarning(\"One or more UI Text references are missing. Assign them in the inspector.\");\n",
        "        }\n",
        "\n",
        "        StartCoroutine(PollThingSpeak());\n",
        "    }\n",
        "\n",
        "    public void ManualRefresh()\n",
        "    {\n",
        "        StopAllCoroutines();\n",
        "        StartCoroutine(PollThingSpeak());\n",
        "    }\n",
        "\n",
        "    private IEnumerator PollThingSpeak()\n",
        "    {\n",
        "        while (true)\n",
        "        {\n",
        "            yield return StartCoroutine(FetchLatestFeed());\n",
        "            yield return new WaitForSeconds(pollInterval);\n",
        "        }\n",
        "    }\n",
        "\n",
        "    private IEnumerator FetchLatestFeed()\n",
        "    {\n",
        "        using (UnityWebRequest www = UnityWebRequest.Get(baseUrl))\n",
        "        {\n",
        "            www.timeout = 10;\n",
        "            yield return www.SendWebRequest();\n",
        "\n",
        "            if (www.result == UnityWebRequest.Result.ConnectionError || www.result == UnityWebRequest.Result.ProtocolError)\n",
        "            {\n",
        "                Debug.LogError($\"ThingSpeak request failed: {www.error}\");\n",
        "                UpdateUIWithError();\n",
        "                yield break;\n",
        "            }\n",
        "\n",
        "            string json = www.downloadHandler.text;\n",
        "\n",
        "            // ThingSpeak responds with an object that contains a \"feeds\" array. We can parse it with JsonUtility.\n",
        "            try\n",
        "            {\n",
        "                ThingSpeakResponse resp = JsonUtility.FromJson<ThingSpeakResponse>(json);\n",
        "                if (resp == null || resp.feeds == null || resp.feeds.Length == 0)\n",
        "                {\n",
        "                    Debug.LogWarning(\"ThingSpeak response didn't contain feeds or was empty.\");\n",
        "                    UpdateUIWithError();\n",
        "                    yield break;\n",
        "                }\n",
        "\n",
        "                Feed latest = resp.feeds[resp.feeds.Length - 1];\n",
        "                UpdateUIWithFeed(latest);\n",
        "            }\n",
        "            catch (Exception ex)\n",
        "            {\n",
        "                Debug.LogError($\"Failed to parse ThingSpeak JSON: {ex.Message}\\nJSON: {json}\");\n",
        "                UpdateUIWithError();\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "\n",
        "    private void UpdateUIWithFeed(Feed f)\n",
        "    {\n",
        "        // Use safe parsing and fallbacks\n",
        "        tempText.text = \"Temp: \" + (string.IsNullOrEmpty(f.field1) ? \"N/A\" : f.field1 + \" Â°C\");\n",
        "        humidityText.text = \"Humidity: \" + (string.IsNullOrEmpty(f.field2) ? \"N/A\" : f.field2 + \" %\");\n",
        "        gasText.text = \"Gas (ADC): \" + (string.IsNullOrEmpty(f.field3) ? \"N/A\" : f.field3);\n",
        "        lightText.text = \"Light (ADC): \" + (string.IsNullOrEmpty(f.field4) ? \"N/A\" : f.field4);\n",
        "\n",
        "        // Motion was sent as 0/1 in your Arduino sketch; convert to readable state\n",
        "        string motionState = \"N/A\";\n",
        "        if (!string.IsNullOrEmpty(f.field5))\n",
        "        {\n",
        "            if (f.field5 == \"1\" || f.field5.ToLower() == \"true\") motionState = \"Motion Detected\";\n",
        "            else if (f.field5 == \"0\" || f.field5.ToLower() == \"false\") motionState = \"No Motion\";\n",
        "            else motionState = f.field5; // raw\n",
        "        }\n",
        "        motionText.text = \"Motion: \" + motionState;\n",
        "\n",
        "        if (lastUpdatedText != null)\n",
        "        {\n",
        "            DateTime dt;\n",
        "            if (DateTime.TryParse(f.created_at, out dt))\n",
        "                lastUpdatedText.text = \"Last update: \" + dt.ToLocalTime().ToString(\"yyyy-MM-dd HH:mm:ss\");\n",
        "            else\n",
        "                lastUpdatedText.text = \"Last update: \" + f.created_at;\n",
        "        }\n",
        "    }\n",
        "\n",
        "    private void UpdateUIWithError()\n",
        "    {\n",
        "        if (tempText != null) tempText.text = \"Temp: --\";\n",
        "        if (humidityText != null) humidityText.text = \"Humidity: --\";\n",
        "        if (gasText != null) gasText.text = \"Gas (ADC): --\";\n",
        "        if (lightText != null) lightText.text = \"Light (ADC): --\";\n",
        "        if (motionText != null) motionText.text = \"Motion: --\";\n",
        "        if (lastUpdatedText != null) lastUpdatedText.text = \"Last update: error\";\n",
        "    }\n",
        "}\n"
      ]
    }
  ]
}